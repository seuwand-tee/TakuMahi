openapi: 3.0.3
info:
  title: TakuMahi API
  version: '1.0'
  description: The API for TakuMahi.
servers:
  - url: 'http://localhost:8080/api'
    description: ''
paths:
  /staff:
    summary: Staff List
    description: A list of all Staff.
    get:
      tags:
        - Staff List
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                type: array
                items:
                  $ref: '#/components/schemas/User'
                example: ''
              example: ''
          description: Response contains the entire Staff list.
      operationId: get All Staff
      summary: Gets All Staff Members
      description: Returns a list of all staff members.
    post:
      requestBody:
        description: Details of Staff Member
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      tags:
        - Staff List
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                type: array
                items:
                  $ref: '#/components/schemas/User'
                example: ''
              example: ''
          description: Response contains the entire Staff list.
          headers: {}
          links: {}
        '201':
          description: New user added.
          headers: {}
          content: {}
          links: {}
        '422':
          description: 'User not added, a User with that ID already exists.'
      operationId: create new user
      summary: Adds a new Staff Member.
      description: Adds a new staff member.
  '/staff/{userId}':
    summary: Staff Member
    description: An individual staff member in the database.
    get:
      tags:
        - Staff Member
      parameters:
        - deprecated: false
          name: userId
          description: The ID of the User.
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Response contains a single user.
          headers: {}
          links: {}
      operationId: get user by id
      summary: Gets a User by their ID.
      description: Gets a single user by their ID.
    delete:
      tags:
        - Staff Member
      operationId: delete user
      summary: Deletes a User by their ID.
      description: Deletes a user by their ID.
      parameters:
        - name: userId
          in: path
          required: true
          deprecated: false
          description: The ID of the User.
          schema:
            type: string
      responses:
        '204':
          description: Staff Member successfully deleted.
          headers: {}
          content: {}
          links: {}
        '404':
          description: No staff member with that ID was found.
          headers: {}
          content: {}
          links: {}
  '/staff/shifts/{userId}':
    summary: Staff Shifts
    description: All shifts assigned to a staff member.
    get:
      tags:
        - Staff Shifts
      operationId: get shifts by user
      summary: Get Shifts by User
      description: Gets all shifts for a specified user.
      parameters:
        - name: userId
          in: path
          description: The ID of the User
          required: true
          deprecated: false
          schema:
            type: string
    post:
      requestBody:
        description: Details of Shift.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shift'
        required: true
      parameters:
        - name: userId
          in: path
          required: true
          deprecated: false
          description: The ID of the User.
          schema:
            type: string
      tags:
        - Staff Shifts
      responses:
        '201':
          description: New Shift successfully updated.
        '422':
          description: 'Shift not recorded, a shift with that id already exists.'
  '/shifts/open':
    summary: Open Shifts List
    description: A list of Open Shifts
    get:
      tags:
        - Open Shifts List
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                type: array
                items:
                  $ref: '#/components/schemas/Shift'
                example: ''
              example: ''
          description: Response contains the entire Open Shift list.
    post:
      tags:
        - Open Shifts List
      requestBody:
        description: Details of Shift
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shift'
        required: true
      responses:
        '201':
          description: New shift added.
          headers: {}
          content: {}
          links: {}
        '422':
          description: 'Shift not added, a Shift with that name already exists.'
      operationId: add to open shifts
      summary: Adds a new shift.
      description: Adds a new shift.
  '/shifts/open/{shiftId}':
    summary: Open Shift
    description: A single Open Shift
    parameters:
        - name: shiftId
          in: path
          required: true
          deprecated: false
          description: The ID of the User.
          schema:
            type: string
    get:
      tags:
        - Open Shift
    delete:
      tags:
        - Open Shift
  '/staff/role/{role}':
    summary: Staff by Role
    description: Staff Members who fit a specified Role.
    get:
      tags:
        - Staff List by Role
      operationId: get users by role
      summary: Get Users by role
      description: Gets a list of users in a specified role.
      parameters:
        - name: role
          in: path
          description: The role requested.
          schema:
            type: string
            enum: [Manager, Senior, Casual]
          required: true
          deprecated: false
      responses:
        '200':
          description: Response contains a list of all Users in specified role.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                description: ''
                example: ''
              example: ''
          headers: {}
          links: {}
        '404':
          description: No users in that role were found.
  '/staff/department/{department}':
    summary: Staff by Department
    description: Staff Members who fit a specified department.
    get:
      tags:
        - Staff List by Department
      operationId: get users by department
      summary: Get Users by Department
      description: Gets a list of users in a specified department.
      parameters:
        - name: department
          in: path
          description: The department requested.
          schema:
            type: string
            enum: [StudentIT, AskIT, GeneralEnquiries]
          required: true
          deprecated: false
      responses:
        '200':
          description: Response contains a list of all Users in specified department.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                description: ''
                example: ''
                externalDocs:
                  url: ''
                  description: ''
              example: ''
          headers: {}
          links: {}
        '404':
          description: No users in that department were found.
components:
  schemas:
    User:
      required:
        - username
        - idNumber
        - role
        - department
      type: object
      properties:
        username:
          description: The unique username of the user.
          type: string
        idNumber:
          description: The unique ID of the user.
          type: integer
        role:
          description: The role of the user.
          type: string
        department:
          description: The department of the user.
          type: string
        firstName:
          description: The first name of the user.
          type: string
        lastName:
          description: The last name of the user.
          type: string
        email:
          description: The email of the user.
          type: string
    Shift:
      required:
        - start
        - end
        - name
        - type
      type: object
      properties:
        start:
          description: The scheduled start of the shift.
          type: string
          format: date-time
        end:
          description: The scheduled finish of the shift.
          type: string
          format: date-time
        name:
          description: The name of the shift.
          type: string
        description:
          description: Description of the shift.
          type: string
        notes:
          description: Notes for the shift.
          type: string
        type:
          description: The last name of the user.
          type: string
  securitySchemes: {}
  headers: {}
  responses: {}
  parameters: {}
tags:
  - name: Staff List
    description: A list of all Staff Members.
  - name: Staff Member
    description: ' A single Staff member.'
  - name: Staff Shifts
    description: List of Shifts for a Staff Member
  - name: Open Shifts List
    description: List of Open Shifts
  - name: Open Shift
    description: A single Open Shift
  - name: Staff List by Role
    description: List of Staff Members by a specified role
  - name: Staff List by Department
    description: List of Staff Members by a specified department.
security: []